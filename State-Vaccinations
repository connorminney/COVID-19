import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import seaborn as sns
import plotly.express as px
from plotly.offline import plot
from scipy.stats import linregress
sns.set(rc={'figure.figsize':(25,8)})

# Load state case data https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36
cases = pd.read_csv('United_States_COVID-19_Cases_and_Deaths_by_State_over_Time.csv')
cases.submission_date = pd.to_datetime(cases.submission_date)
cases = cases[cases.submission_date >= '2020-01-01']

# Load vaccination data https://data.cdc.gov/Vaccinations/COVID-19-Vaccine-Distribution-Allocations-by-Juris/b7pe-5nws
vax = pd.read_csv('COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv')
vax.Date = pd.to_datetime(vax.Date)

# Drop unnecessary columns from case data
cases = cases.drop(['conf_cases', 'prob_cases', 'pnew_case', 'conf_death', 'prob_death', 
                    'pnew_death', 'created_at', 'consent_cases','consent_deaths'], axis = 1)

# Create a normalized cases dataset
norm = pd.DataFrame()
for i in cases.state.dropna().unique():
    sub = cases[cases.state == i].sort_values('submission_date').reset_index(drop = True)
    for j in range(len(sub)):
        sub.loc[j, 'WeeklyCaseAverage'] = sub[j-7:j]['new_case'].mean()
        sub.loc[j, 'WeeklyDeathAverage'] = sub[j-7:j]['new_death'].mean()
    normalized = pd.DataFrame(MinMaxScaler().fit_transform(sub[['new_case', 'new_death', 'WeeklyCaseAverage', 'WeeklyDeathAverage']]), columns = ['NormalizedNewCases', 'NormalizedNewDeaths', 'NormalizedWeeklyCases', 'NormalizedWeeklyDeaths'])
    sub = sub.merge(normalized, left_index = True, right_index = True)
    norm = norm.append(sub)
    print(i)
    
# Merge the cases and the vaccination data
states = norm.merge(vax[['Location', 'Date', 'Dist_Per_100K', 'Admin_Per_100K', 'Administered_Dose1_Pop_Pct', 'Series_Complete_Pop_Pct']], left_on = ['state', 'submission_date'], right_on = ['Location', 'Date'], how = 'left')
del cases, vax, norm

# Create a fatality rate metric
states['Lethality'] = states.WeeklyDeathAverage/states.WeeklyCaseAverage
    
# Load population data 
pop = pd.read_excel('populations.xlsx')
pop.State = pop.State.str.replace('\xa0', '')
pop.State.replace({
    'Alabama': 'AL',
    'Alaska': 'AK',
    'American Samoa': 'AS',
    'Arizona': 'AZ',
    'Arkansas': 'AR',
    'California': 'CA',
    'Colorado': 'CO',
    'Connecticut': 'CT',
    'Delaware': 'DE',
    'District of Columbia': 'DC',
    'Florida': 'FL',
    'Georgia': 'GA',
    'Guam': 'GU',
    'Hawaii': 'HI',
    'Idaho': 'ID',
    'Illinois': 'IL',
    'Indiana': 'IN',
    'Iowa': 'IA',
    'Kansas': 'KS',
    'Kentucky': 'KY',
    'Louisiana': 'LA',
    'Maine': 'ME',
    'Maryland': 'MD',
    'Massachusetts': 'MA',
    'Michigan': 'MI',
    'Minnesota': 'MN',
    'Mississippi': 'MS',
    'Missouri': 'MO',
    'Montana': 'MT',
    'Nebraska': 'NE',
    'Nevada': 'NV',
    'New Hampshire': 'NH',
    'New Jersey': 'NJ',
    'New Mexico': 'NM',
    'New York': 'NY',
    'North Carolina': 'NC',
    'North Dakota': 'ND',
    'Northern Mariana Islands':'MP',
    'Ohio': 'OH',
    'Oklahoma': 'OK',
    'Oregon': 'OR',
    'Pennsylvania': 'PA',
    'Puerto Rico': 'PR',
    'Rhode Island': 'RI',
    'South Carolina': 'SC',
    'South Dakota': 'SD',
    'Tennessee': 'TN',
    'Texas': 'TX',
    'Utah': 'UT',
    'Vermont': 'VT',
    'Virgin Islands': 'VI',
    'Virginia': 'VA',
    'Washington': 'WA',
    'West Virginia': 'WV',
    'Wisconsin': 'WI',
    'Wyoming': 'WY'
    }, inplace = True)

# pull pop info into states
states = states.merge(pop, left_on = 'state', right_on = 'State', how = 'left')
states.drop(['Location', 'Date', 'state'], axis=1, inplace=True)

# Calculate cases and deaths by population
states['NewCasesPer100kAverage'] = (states.WeeklyCaseAverage/states.Population)*100000
states['NewDeathsPer100kAverage'] = (states.WeeklyDeathAverage/states.Population)*100000

# Calculate correlations
correlations = states.corr()

# Add columns with updated name formatting
states['Daily Deaths per 100K Residents'] = states.NewDeathsPer100kAverage
states['Vaccinated Population'] = states.Administered_Dose1_Pop_Pct

# Plot correlations
fig = px.scatter(states[(states.submission_date == max(states.submission_date))],
                 x="Daily Deaths per 100K Residents", y="Vaccinated Population",
                 trendline="ols",
                 text = 'State',
                 size_max = 50,
                 title = 'Vaccination Rates and COVID-Related Mortality by State')
fig.update_traces(textposition='top center')
plot(fig)

# Calculate the amount of lives saved per 1% increase in vaccination
slope = states[['Administered_Dose1_Pop_Pct','NewDeathsPer100kAverage']].dropna()
reg = linregress(list(slope.Administered_Dose1_Pop_Pct), list(slope.NewDeathsPer100kAverage))
print('Every 1% increase in vaccination rates save {} lives per day.'.format(round(pop.Population.sum()/100000*reg[0]*(-1))))
